name: Test schematic_db
on: [pull_request]
#on:
#  push:
#    branches:
#      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # Cache the installation of Poetry itself, e.g. the next step. This prevents the workflow
      # from installing Poetry every time, which can be slow. Note the use of the Poetry version
      # number in the cache key, and the "-0" suffix: this allows you to invalidate the cache
      # manually if/when you want to upgrade Poetry, or if something goes wrong. This could be
      # mildly cleaner by using an environment variable, but I don't really care.
      - name: cache poetry install
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.1.12-0

      # Install Poetry. You could do this manually, or there are several actions that do this.
      # `snok/install-poetry` seems to be minimal yet complete, and really just calls out to
      # Poetry's default install script, which feels correct. I pin the Poetry version here
      # because Poetry does occasionally change APIs between versions and I don't want my
      # actions to break if it does.
      #
      # The key configuration value here is `virtualenvs-in-project: true`: this creates the
      # venv as a `.venv` in your testing directory, which allows the next step to easily
      # cache it.
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Publish package to Pypi
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        run: |
          poetry publish --build --username $PYPI_USERNAME --password $PYPI_TOKEN
