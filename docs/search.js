window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "rdb.rdb", "modulename": "rdb.rdb", "type": "module", "doc": "<p>RDB</p>\n"}, {"fullname": "rdb.rdb.RDB", "modulename": "rdb.rdb", "qualname": "RDB", "type": "class", "doc": "<p>RDB</p>\n\n<ul>\n<li>Represents a relational database.</li>\n</ul>\n"}, {"fullname": "rdb.rdb.RDB.__init__", "modulename": "rdb.rdb", "qualname": "RDB.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_yaml_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "rdb.rdb.RDB.update_all_database_tables", "modulename": "rdb.rdb", "qualname": "RDB.update_all_database_tables", "type": "function", "doc": "<p>Updates all tables in the list of table_configs</p>\n\n<p>Args:\n    manifest_table_names (List[List[str]]): A list where each item is a list of the\n     names of tables in the manifest store\n    table_config (List[DBObjectConfig]): A list of generic representations of each\n     table as a DBObjectConfig object. The list must be in the correct order to\n     update in regards to relationships.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">manifest_table_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">table_configs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBObjectConfig</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb.rdb.RDB.update_database_table", "modulename": "rdb.rdb", "qualname": "RDB.update_database_table", "type": "function", "doc": "<p>Updates a table in the database based on one or more manifests.\nIf any of the manifests don't exist an exception will be raised.\nIf the table doesn't exist in the database it will be built with the table config.</p>\n\n<p>Args:\n    manifest_table_names (List[str]): A list of the names of tables in the manifest store\n    table_config (DBObjectConfig): A generic representation of the table as a\n    DBObjectConfig object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">manifest_table_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">table_config</span><span class=\"p\">:</span> <span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBObjectConfig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb.rdb.RDB.store_query_results", "modulename": "rdb.rdb", "qualname": "RDB.store_query_results", "type": "function", "doc": "<p>Stores the results of queries\nTakes a csv file with two columns named \"query\" and \"table_name\", and runs each query,\nstoring the result in the query_result_store as a table.</p>\n\n<p>Args:\n    csv_path (str): A path to a csv file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">csv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb.rdb.RDB.store_query_result", "modulename": "rdb.rdb", "qualname": "RDB.store_query_result", "type": "function", "doc": "<p>Stores the result of a query</p>\n\n<p>Args:\n    query (str): A query in SQL form\n    table_name (str): The name of the table the result will be stored as</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb.rdb.RDB.delete_table_rows", "modulename": "rdb.rdb", "qualname": "RDB.delete_table_rows", "type": "function", "doc": "<p>See RDBType.delete_table_rows()</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">table_config</span><span class=\"p\">:</span> <span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBObjectConfig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb.rdb.RDB.drop_table", "modulename": "rdb.rdb", "qualname": "RDB.drop_table", "type": "function", "doc": "<p>See RDBType.drop_table()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql", "modulename": "rdb_type.mysql", "type": "module", "doc": "<p>MYSQL</p>\n"}, {"fullname": "rdb_type.mysql.MySQL", "modulename": "rdb_type.mysql", "qualname": "MySQL", "type": "class", "doc": "<p>MYSQL</p>\n\n<ul>\n<li>Represents a mysql database.</li>\n<li>Implements the RDBType interface.</li>\n<li>Handles MYSQL specific functionality.</li>\n</ul>\n", "bases": "rdb_type.rdb_type.RDBType"}, {"fullname": "rdb_type.mysql.MySQL.__init__", "modulename": "rdb_type.mysql", "qualname": "MySQL.__init__", "type": "function", "doc": "<p>Init\nobj = MySQL({\n    username: \"root\"\n    password: \"root\"\n    host: \"localhost\"\n    schema: \"test_schema\"\n})</p>\n\n<p>An initial connection is created to the database without the schema.\nThe schema will be created if it doesn't exist.\nA second connection is created with the schema.\nThe second connection is used to create the sqlalchemy connection and metadata.</p>\n\n<p>Args:\n    config_dict (dict): A dict with mysql specific fields</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "rdb_type.mysql.MySQL.get_table_id_from_name", "modulename": "rdb_type.mysql", "qualname": "MySQL.get_table_id_from_name", "type": "function", "doc": "<p>Gets the tables id\nIn SQL databases  the id and name are the same. In some rdb types such as Synapse the\nid will be different ie. the Synapse id.</p>\n\n<p>Args:\n    table_name (str): The name of the table</p>\n\n<p>Returns:\n    str: The id of the table</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.get_table_name_from_id", "modulename": "rdb_type.mysql", "qualname": "MySQL.get_table_name_from_id", "type": "function", "doc": "<p>Gets the tables name\nThe inverse of get_table_id_from_name</p>\n\n<p>Args:\n    table_id (str): The id of the table</p>\n\n<p>Returns:\n    str: The name of the table</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.execute_sql_statement", "modulename": "rdb_type.mysql", "qualname": "MySQL.execute_sql_statement", "type": "function", "doc": "<p>Executes a valid SQL statement\nShould be used when a result isn't expected.\nrdbtype.execute_sql_statement(\"DROP TABLE IF EXISTS table_name;\")</p>\n\n<p>Args:\n    statement (str): A SQL statement</p>\n\n<p>Returns:\n    sqlalchemy.engine.cursor.LegacyCursorResult: A SQL result</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">statement</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.execute_sql_query", "modulename": "rdb_type.mysql", "qualname": "MySQL.execute_sql_query", "type": "function", "doc": "<p>Executes a valid SQL statement\nShould be used when a result is expected.</p>\n\n<p>rdbtype.execute_sql_query(\"SHOW DATABASES;\")</p>\n\n<p>Args:\n    query (str): A SQL statement</p>\n\n<p>Returns:\n    pd.DataFrame: The table</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.query_table", "modulename": "rdb_type.mysql", "qualname": "MySQL.query_table", "type": "function", "doc": "<p>Queries the whole table</p>\n\n<p>Args:\n    table_name (str): The name of the table\n    table_config (DBObjectConfig): A generic representation of the table as a\n    DBObjectConfig object.</p>\n\n<p>Returns:\n    pd.DataFrame: The table</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">table_config</span><span class=\"p\">:</span> <span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBObjectConfig</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.add_table", "modulename": "rdb_type.mysql", "qualname": "MySQL.add_table", "type": "function", "doc": "<p>Adds a table to the schema</p>\n\n<p>Example:\n    ::</p>\n\n<pre><code>        rdbtype.add_table(\n            \"table_name\",\n            DBObjectConfig(\n                name = \"table_one\",\n                attributes = [\n                    DBAttributeConfig(name=\"pk_col\", datatype=DBDatatype.Text),\n                    DBAttributeConfig(name=\"string_col\", datatype=DBDatatype.Text),\n                    DBAttributeConfig(name=\"int_col\", datatype=DBDatatype.Int),\n                    DBAttributeConfig(name=\"double_col\", datatype=DBDatatype.Float),\n                    DBAttributeConfig(name=\"date_col\", datatype=DBDatatype.Date),\n                    DBAttributeConfig(name=\"bool_col\", datatype=DBDatatype.Boolean)\n                ],\n                primary_keys = [\"pk_col\"],\n                foreign_keys = []\n            )\n        )\n</code></pre>\n\n<p>Args:\n    table_name (str): The id(name) of the table to be added\n    table_config (DBObjectConfig): A generic representation of the table as a \n        DBObjectConfig object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">table_config</span><span class=\"p\">:</span> <span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBObjectConfig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.drop_table", "modulename": "rdb_type.mysql", "qualname": "MySQL.drop_table", "type": "function", "doc": "<p>Drops a table from the schema</p>\n\n<p>rdbtype.drop_table(\"table_name\")</p>\n\n<p>Args:\n    table_name (str): The id(name) of the table to be dropped</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.add_table_column", "modulename": "rdb_type.mysql", "qualname": "MySQL.add_table_column", "type": "function", "doc": "<p>Adds a column to the given table</p>\n\n<p>rdbtype.add_table_column(\"table_name\", \"name\", \"varchar(100)\")</p>\n\n<p>Args:\n    table_name (str): The id(name) of the table the column will be added to\n    column_name (str): The name of the column being added\n    datatype (str): The SQL datatype of the column being added</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">datatype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.drop_table_column", "modulename": "rdb_type.mysql", "qualname": "MySQL.drop_table_column", "type": "function", "doc": "<p>Removes a column from the given table</p>\n\n<p>Args:\n    table_name (str): The id(name) of the table the column will be removed from\n    column_name (str): The name of the column being removed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.delete_table_rows", "modulename": "rdb_type.mysql", "qualname": "MySQL.delete_table_rows", "type": "function", "doc": "<p>Deletes rows from the given table</p>\n\n<p>Args:\n    table_name (str): The name of the table the rows will be deleted from\n    data (pd.DataFrame): A pandas.DataFrame. It must contain the primary keys of the table\n    table_config (DBObjectConfig): A generic representation of the table as a\n    DBObjectConfig object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">table_config</span><span class=\"p\">:</span> <span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBObjectConfig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.upsert_table_rows", "modulename": "rdb_type.mysql", "qualname": "MySQL.upsert_table_rows", "type": "function", "doc": "<p>Updates or inserts rows into the given table</p>\n\n<p>rdbtype.upsert_table_rows(\n    \"table_name\",\n    DataFrame({\n        \"string_col\": [\"a\",\"b\",\"c\"],\n        \"int_col\": [1,2,3]\n    })\n)</p>\n\n<p>Args:\n    table_name (str): The id(name) of the table the rows will be updated or added to\n    data (pd.DataFrame): A pandas.DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.get_table_names", "modulename": "rdb_type.mysql", "qualname": "MySQL.get_table_names", "type": "function", "doc": "<p>Gets the names of the tables in the database</p>\n\n<p>Returns:\n    List[str]: A list of table names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.get_column_names_from_table", "modulename": "rdb_type.mysql", "qualname": "MySQL.get_column_names_from_table", "type": "function", "doc": "<p>Gets the names of the columns from the given table</p>\n\n<p>Args:\n    table_name (str): The id(name) of the table the columns will be returned from</p>\n\n<p>Returns:\n    List[str]: A list fo column names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.get_columns_from_table", "modulename": "rdb_type.mysql", "qualname": "MySQL.get_columns_from_table", "type": "function", "doc": "<p>Gets the columns form the given table</p>\n\n<p>Args:\n    table_name (str): The id(name) of the table the columns will be returned from</p>\n\n<p>Returns:\n    List[Dict]: A list of columns in dict form</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.get_schemas", "modulename": "rdb_type.mysql", "qualname": "MySQL.get_schemas", "type": "function", "doc": "<p>Gets the database schemas</p>\n\n<p>Returns:\n    List[str]: A list of names of the the schemas</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.mysql.MySQL.get_current_schema", "modulename": "rdb_type.mysql", "qualname": "MySQL.get_current_schema", "type": "function", "doc": "<p>Gets the current database schema</p>\n\n<p>Returns:\n    str: The name of the current schema</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse", "modulename": "rdb_type.synapse", "type": "module", "doc": "<p>Synapse</p>\n"}, {"fullname": "rdb_type.synapse.Synapse", "modulename": "rdb_type.synapse", "qualname": "Synapse", "type": "class", "doc": "<p>Synapse</p>\n\n<ul>\n<li>Represents:\n<ul>\n<li>A database stored as Synapse tables</li>\n<li>A source of manifest tables in Synapse</li>\n<li>A destination of queries in Synapse</li>\n</ul></li>\n<li>Implements the RDBType interface.</li>\n<li>Handles Synapse specific functionality.</li>\n</ul>\n", "bases": "rdb_type.rdb_type.RDBType"}, {"fullname": "rdb_type.synapse.Synapse.__init__", "modulename": "rdb_type.synapse", "qualname": "Synapse.__init__", "type": "function", "doc": "<p>Init\nobj = MySQL({\n    username: \"firstname.lastname@sagebase.org\"\n    auth_token: \"xxx\"\n    project_id: \"syn1\"\n})</p>\n\n<p>Args:\n    config_dict (dict): A dict with synapse specific fields</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "rdb_type.synapse.Synapse.get_table_names", "modulename": "rdb_type.synapse", "qualname": "Synapse.get_table_names", "type": "function", "doc": "<p>Gets the names of the tables in the database</p>\n\n<p>Returns:\n    List[str]: A list of table names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.get_table_id_from_name", "modulename": "rdb_type.synapse", "qualname": "Synapse.get_table_id_from_name", "type": "function", "doc": "<p>Gets the tables id\nIn SQL databases  the id and name are the same. In some rdb types such as Synapse the\nid will be different ie. the Synapse id.</p>\n\n<p>Args:\n    table_name (str): The name of the table</p>\n\n<p>Returns:\n    str: The id of the table</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.get_table_name_from_id", "modulename": "rdb_type.synapse", "qualname": "Synapse.get_table_name_from_id", "type": "function", "doc": "<p>Gets the tables name\nThe inverse of get_table_id_from_name</p>\n\n<p>Args:\n    table_id (str): The id of the table</p>\n\n<p>Returns:\n    str: The name of the table</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.get_column_names_from_table", "modulename": "rdb_type.synapse", "qualname": "Synapse.get_column_names_from_table", "type": "function", "doc": "<p>Gets the names of the columns from the given table</p>\n\n<p>Args:\n    table_name (str): The id(name) of the table the columns will be returned from</p>\n\n<p>Returns:\n    List[str]: A list fo column names</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.add_table", "modulename": "rdb_type.synapse", "qualname": "Synapse.add_table", "type": "function", "doc": "<p>Adds a table to the schema</p>\n\n<p>Example:\n    ::</p>\n\n<pre><code>        rdbtype.add_table(\n            \"table_name\",\n            DBObjectConfig(\n                name = \"table_one\",\n                attributes = [\n                    DBAttributeConfig(name=\"pk_col\", datatype=DBDatatype.Text),\n                    DBAttributeConfig(name=\"string_col\", datatype=DBDatatype.Text),\n                    DBAttributeConfig(name=\"int_col\", datatype=DBDatatype.Int),\n                    DBAttributeConfig(name=\"double_col\", datatype=DBDatatype.Float),\n                    DBAttributeConfig(name=\"date_col\", datatype=DBDatatype.Date),\n                    DBAttributeConfig(name=\"bool_col\", datatype=DBDatatype.Boolean)\n                ],\n                primary_keys = [\"pk_col\"],\n                foreign_keys = []\n            )\n        )\n</code></pre>\n\n<p>Args:\n    table_name (str): The id(name) of the table to be added\n    table_config (DBObjectConfig): A generic representation of the table as a \n        DBObjectConfig object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">table_config</span><span class=\"p\">:</span> <span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBObjectConfig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.build_table", "modulename": "rdb_type.synapse", "qualname": "Synapse.build_table", "type": "function", "doc": "<p>Adds a table to the project based on the input table</p>\n\n<p>Args:\n    table_name (str): The name fo the table\n    table (pd.DataFrame): A dataframe of the table</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.drop_table", "modulename": "rdb_type.synapse", "qualname": "Synapse.drop_table", "type": "function", "doc": "<p>Drops a table from the schema</p>\n\n<p>rdbtype.drop_table(\"table_name\")</p>\n\n<p>Args:\n    table_name (str): The id(name) of the table to be dropped</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.add_table_column", "modulename": "rdb_type.synapse", "qualname": "Synapse.add_table_column", "type": "function", "doc": "<p>Adds a column to the given table</p>\n\n<p>rdbtype.add_table_column(\"table_name\", \"name\", \"varchar(100)\")</p>\n\n<p>Args:\n    table_name (str): The id(name) of the table the column will be added to\n    column_name (str): The name of the column being added\n    datatype (str): The SQL datatype of the column being added</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">datatype</span><span class=\"p\">:</span> <span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBDatatype</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.drop_table_column", "modulename": "rdb_type.synapse", "qualname": "Synapse.drop_table_column", "type": "function", "doc": "<p>Removes a column from the given table</p>\n\n<p>Args:\n    table_name (str): The id(name) of the table the column will be removed from\n    column_name (str): The name of the column being removed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.execute_sql_statement", "modulename": "rdb_type.synapse", "qualname": "Synapse.execute_sql_statement", "type": "function", "doc": "<p>Executes a valid SQL statement\nShould be used when a result isn't expected.\nrdbtype.execute_sql_statement(\"DROP TABLE IF EXISTS table_name;\")</p>\n\n<p>Args:\n    statement (str): A SQL statement</p>\n\n<p>Returns:\n    sqlalchemy.engine.cursor.LegacyCursorResult: A SQL result</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">statement</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">include_row_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.execute_sql_query", "modulename": "rdb_type.synapse", "qualname": "Synapse.execute_sql_query", "type": "function", "doc": "<p>Executes a valid SQL statement\nShould be used when a result is expected.</p>\n\n<p>rdbtype.execute_sql_query(\"SHOW DATABASES;\")</p>\n\n<p>Args:\n    query (str): A SQL statement</p>\n\n<p>Returns:\n    pd.DataFrame: The table</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">include_row_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.query_table", "modulename": "rdb_type.synapse", "qualname": "Synapse.query_table", "type": "function", "doc": "<p>Queries the whole table</p>\n\n<p>Args:\n    table_name (str): The name of the table\n    table_config (DBObjectConfig): A generic representation of the table as a\n    DBObjectConfig object.</p>\n\n<p>Returns:\n    pd.DataFrame: The table</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">table_config</span><span class=\"p\">:</span> <span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBObjectConfig</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.insert_table_rows", "modulename": "rdb_type.synapse", "qualname": "Synapse.insert_table_rows", "type": "function", "doc": "<p>Insert table rows</p>\n\n<p>Args:\n    table_name (str): The name of the table to add rows into\n    data (pd.DataFrame): The rows to be added.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.update_table_rows", "modulename": "rdb_type.synapse", "qualname": "Synapse.update_table_rows", "type": "function", "doc": "<p>Placeholder</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.delete_table_rows", "modulename": "rdb_type.synapse", "qualname": "Synapse.delete_table_rows", "type": "function", "doc": "<p>Deletes rows from the given table</p>\n\n<p>Args:\n    table_name (str): The name of the table the rows will be deleted from\n    data (pd.DataFrame): A pandas.DataFrame. It must contain the primary keys of the table\n    table_config (DBObjectConfig): A generic representation of the table as a\n    DBObjectConfig object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">table_config</span><span class=\"p\">:</span> <span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBObjectConfig</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rdb_type.synapse.Synapse.upsert_table_rows", "modulename": "rdb_type.synapse", "qualname": "Synapse.upsert_table_rows", "type": "function", "doc": "<p>Updates or inserts rows into the given table</p>\n\n<p>rdbtype.upsert_table_rows(\n    \"table_name\",\n    DataFrame({\n        \"string_col\": [\"a\",\"b\",\"c\"],\n        \"int_col\": [1,2,3]\n    })\n)</p>\n\n<p>Args:\n    table_name (str): The id(name) of the table the rows will be updated or added to\n    data (pd.DataFrame): A pandas.DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "db_object_config.db_object_config", "modulename": "db_object_config.db_object_config", "type": "module", "doc": "<p>Table config objects\nThese are a set of object for defining a database table in a dialect agnostic way.</p>\n"}, {"fullname": "db_object_config.db_object_config.DBDatatype", "modulename": "db_object_config.db_object_config", "qualname": "DBDatatype", "type": "class", "doc": "<p>A generic datatype that should be supported by all database types.</p>\n", "bases": "enum.Enum"}, {"fullname": "db_object_config.db_object_config.DBDatatype.Text", "modulename": "db_object_config.db_object_config", "qualname": "DBDatatype.Text", "type": "variable", "doc": "<p></p>\n", "default_value": " = &lt;DBDatatype.Text: &#x27;1&#x27;&gt;"}, {"fullname": "db_object_config.db_object_config.DBDatatype.Date", "modulename": "db_object_config.db_object_config", "qualname": "DBDatatype.Date", "type": "variable", "doc": "<p></p>\n", "default_value": " = &lt;DBDatatype.Date: &#x27;2&#x27;&gt;"}, {"fullname": "db_object_config.db_object_config.DBDatatype.Int", "modulename": "db_object_config.db_object_config", "qualname": "DBDatatype.Int", "type": "variable", "doc": "<p></p>\n", "default_value": " = &lt;DBDatatype.Int: &#x27;3&#x27;&gt;"}, {"fullname": "db_object_config.db_object_config.DBDatatype.Float", "modulename": "db_object_config.db_object_config", "qualname": "DBDatatype.Float", "type": "variable", "doc": "<p></p>\n", "default_value": " = &lt;DBDatatype.Float: &#x27;4&#x27;&gt;"}, {"fullname": "db_object_config.db_object_config.DBDatatype.Boolean", "modulename": "db_object_config.db_object_config", "qualname": "DBDatatype.Boolean", "type": "variable", "doc": "<p></p>\n", "default_value": " = &lt;DBDatatype.Boolean: &#x27;5&#x27;&gt;"}, {"fullname": "db_object_config.db_object_config.DBAttributeConfig", "modulename": "db_object_config.db_object_config", "qualname": "DBAttributeConfig", "type": "class", "doc": "<p>A config for a table attribute(column).</p>\n"}, {"fullname": "db_object_config.db_object_config.DBAttributeConfig.__init__", "modulename": "db_object_config.db_object_config", "qualname": "DBAttributeConfig.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">datatype</span><span class=\"p\">:</span> <span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBDatatype</span></span>)</span>"}, {"fullname": "db_object_config.db_object_config.DBObjectConfig", "modulename": "db_object_config.db_object_config", "qualname": "DBObjectConfig", "type": "class", "doc": "<p>A config for a generic database table.</p>\n"}, {"fullname": "db_object_config.db_object_config.DBObjectConfig.__init__", "modulename": "db_object_config.db_object_config", "qualname": "DBObjectConfig.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">attributes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">db_object_config</span><span class=\"o\">.</span><span class=\"n\">DBAttributeConfig</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">primary_keys</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_keys</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();